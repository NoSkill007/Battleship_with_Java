package Juego;

import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.*;

/**
 *
 * @author keneth
 */

public class Jugador_2 extends javax.swing.JPanel {

    Cambio_Turno2 Cambio_Turno2 = new Cambio_Turno2();
    public static Boolean[][] Estado_Juego = new Boolean[10][10];
    static boolean Barcos_Guardados = false;
    static boolean Ejecutado = true;
    Almacen_Nombres Almacen_Nombres = new Almacen_Nombres();
    Mostrar_Ganador Mostrar_Ganador = new Mostrar_Ganador();

    public Jugador_2() {
        initComponents();
        actualizarNombre2();
        Coordenadas_P2.setFocusable(false);
        MATRIZ2.setVisible(false);
        Matriz2_2.setVisible(false);

        if (!Barcos_Guardados) {
            Coordenadas_P2.setVisible(false);
            Txt_Coord.setVisible(false);
            MATRIZ2.setVisible(false);
            Matriz2_2.setVisible(false);
            Posicionamiento(Mapa);
            Barcos_Guardados = true; // Marcamos las posiciones de los barcos como ya guardadas
        } else {
            Ataque_Vida(Mapa, Coordenadas_P2);
            Confirmar_Btn.setVisible(true);
            Confirmar_Txt.setVisible(true);
            MATRIZ2.setText(imprimir2());
            MATRIZ2.setVisible(true);
            Matriz2_2.setVisible(true);

            if (Ejecutado == true) { // Verifica si PosicionBarcos ya se ha ejecutado

                for (int i = 1; i <= 9; i++) {
                    for (int j = 1; j <= 9; j++) {
                        if (Jugador_1.Barcos_EnTablero1[j][i]) {
                            System.out.print("R ");
                        } else {
                            System.out.print("- ");
                        }
                    }
                    System.out.println();
                }
            }
        }
        Confirmar_Btn.setVisible(false);
        Confirmar_Txt.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Mapa = new Fondo_Mapa();
        Num_1 = new javax.swing.JLabel();
        Num_2 = new javax.swing.JLabel();
        Num_6 = new javax.swing.JLabel();
        Num_3 = new javax.swing.JLabel();
        Num_7 = new javax.swing.JLabel();
        Num_4 = new javax.swing.JLabel();
        Num_9 = new javax.swing.JLabel();
        Num_5 = new javax.swing.JLabel();
        Num_8 = new javax.swing.JLabel();
        Letr_A = new javax.swing.JLabel();
        Letr_B = new javax.swing.JLabel();
        Letr_C = new javax.swing.JLabel();
        Letr_D = new javax.swing.JLabel();
        Letr_E = new javax.swing.JLabel();
        Letr_F = new javax.swing.JLabel();
        Letr_G = new javax.swing.JLabel();
        Letr_H = new javax.swing.JLabel();
        Letr_I = new javax.swing.JLabel();
        Img_Capitan = new javax.swing.JLabel();
        Txt_Coord = new javax.swing.JLabel();
        Coordenadas_P2 = new javax.swing.JTextField();
        Confirmar_Btn = new javax.swing.JPanel();
        Confirmar_Txt = new javax.swing.JLabel();
        Usuario_2 = new javax.swing.JLabel();
        Mensaje = new javax.swing.JLabel();
        Matriz2_2 = new javax.swing.JScrollPane();
        MATRIZ2 = new javax.swing.JTextPane();

        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(800, 500));
        setMinimumSize(new java.awt.Dimension(800, 500));
        setPreferredSize(new java.awt.Dimension(800, 500));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Mapa.setBackground(new java.awt.Color(0, 255, 0));
        Mapa.setMaximumSize(new java.awt.Dimension(405, 405));
        Mapa.setMinimumSize(new java.awt.Dimension(405, 405));

        javax.swing.GroupLayout MapaLayout = new javax.swing.GroupLayout(Mapa);
        Mapa.setLayout(MapaLayout);
        MapaLayout.setHorizontalGroup(
            MapaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 405, Short.MAX_VALUE)
        );
        MapaLayout.setVerticalGroup(
            MapaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 405, Short.MAX_VALUE)
        );

        add(Mapa, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 70, -1, -1));

        Num_1.setFont(new java.awt.Font("Roboto Black", 1, 36)); // NOI18N
        Num_1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Num_1.setText("1");
        add(Num_1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 30, 45, 45));

        Num_2.setFont(new java.awt.Font("Roboto Black", 1, 36)); // NOI18N
        Num_2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Num_2.setText("2");
        add(Num_2, new org.netbeans.lib.awtextra.AbsoluteConstraints(105, 30, 45, 45));

        Num_6.setFont(new java.awt.Font("Roboto Black", 1, 36)); // NOI18N
        Num_6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Num_6.setText("6");
        add(Num_6, new org.netbeans.lib.awtextra.AbsoluteConstraints(285, 30, 45, 45));

        Num_3.setFont(new java.awt.Font("Roboto Black", 1, 36)); // NOI18N
        Num_3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Num_3.setText("3");
        add(Num_3, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 30, 45, 45));

        Num_7.setFont(new java.awt.Font("Roboto Black", 1, 36)); // NOI18N
        Num_7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Num_7.setText("7");
        add(Num_7, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 30, 45, 45));

        Num_4.setFont(new java.awt.Font("Roboto Black", 1, 36)); // NOI18N
        Num_4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Num_4.setText("4");
        add(Num_4, new org.netbeans.lib.awtextra.AbsoluteConstraints(195, 30, 45, 45));

        Num_9.setFont(new java.awt.Font("Roboto Black", 1, 36)); // NOI18N
        Num_9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Num_9.setText("9");
        add(Num_9, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 30, 45, 45));

        Num_5.setFont(new java.awt.Font("Roboto Black", 1, 36)); // NOI18N
        Num_5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Num_5.setText("5");
        add(Num_5, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 30, 45, 45));

        Num_8.setFont(new java.awt.Font("Roboto Black", 1, 36)); // NOI18N
        Num_8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Num_8.setText("8");
        add(Num_8, new org.netbeans.lib.awtextra.AbsoluteConstraints(375, 30, 45, 45));

        Letr_A.setFont(new java.awt.Font("Roboto Black", 1, 36)); // NOI18N
        Letr_A.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Letr_A.setText("A");
        add(Letr_A, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 45, 45));

        Letr_B.setFont(new java.awt.Font("Roboto Black", 1, 36)); // NOI18N
        Letr_B.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Letr_B.setText("B");
        add(Letr_B, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 115, 45, 45));

        Letr_C.setFont(new java.awt.Font("Roboto Black", 1, 36)); // NOI18N
        Letr_C.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Letr_C.setText("C");
        add(Letr_C, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, 45, 45));

        Letr_D.setFont(new java.awt.Font("Roboto Black", 1, 36)); // NOI18N
        Letr_D.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Letr_D.setText("D");
        add(Letr_D, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 205, 45, 45));

        Letr_E.setFont(new java.awt.Font("Roboto Black", 1, 36)); // NOI18N
        Letr_E.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Letr_E.setText("E");
        add(Letr_E, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 250, 45, 45));

        Letr_F.setFont(new java.awt.Font("Roboto Black", 1, 36)); // NOI18N
        Letr_F.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Letr_F.setText("F");
        add(Letr_F, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 295, 45, 45));

        Letr_G.setFont(new java.awt.Font("Roboto Black", 1, 36)); // NOI18N
        Letr_G.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Letr_G.setText("G");
        add(Letr_G, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 340, 45, 45));

        Letr_H.setFont(new java.awt.Font("Roboto Black", 1, 36)); // NOI18N
        Letr_H.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Letr_H.setText("H");
        add(Letr_H, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 385, 45, 45));

        Letr_I.setFont(new java.awt.Font("Roboto Black", 1, 36)); // NOI18N
        Letr_I.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Letr_I.setText("I");
        add(Letr_I, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 430, 45, 45));

        Img_Capitan.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Img_Capitan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Capitan2.png"))); // NOI18N
        add(Img_Capitan, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 70, 160, 200));

        Txt_Coord.setFont(new java.awt.Font("Roboto Light", 0, 14)); // NOI18N
        Txt_Coord.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Txt_Coord.setText("Ingrese coordenadas de ataque");
        add(Txt_Coord, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 280, 220, 20));

        Coordenadas_P2.setFont(new java.awt.Font("Roboto Light", 0, 14)); // NOI18N
        Coordenadas_P2.setForeground(new java.awt.Color(153, 153, 153));
        Coordenadas_P2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Coordenadas_P2.setText("A,1");
        Coordenadas_P2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Coordenadas_P2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Coordenadas_P2MouseClicked(evt);
            }
        });
        add(Coordenadas_P2, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 300, 60, 30));

        Confirmar_Btn.setBackground(new java.awt.Color(0, 0, 0));

        Confirmar_Txt.setFont(new java.awt.Font("Roboto Light", 1, 16)); // NOI18N
        Confirmar_Txt.setForeground(new java.awt.Color(255, 255, 255));
        Confirmar_Txt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Confirmar_Txt.setText("CONFIRMAR");
        Confirmar_Txt.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Confirmar_Txt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Confirmar_TxtMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout Confirmar_BtnLayout = new javax.swing.GroupLayout(Confirmar_Btn);
        Confirmar_Btn.setLayout(Confirmar_BtnLayout);
        Confirmar_BtnLayout.setHorizontalGroup(
            Confirmar_BtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Confirmar_Txt, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );
        Confirmar_BtnLayout.setVerticalGroup(
            Confirmar_BtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Confirmar_Txt, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
        );

        add(Confirmar_Btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 430, 100, 40));

        Usuario_2.setFont(new java.awt.Font("Roboto Black", 1, 24)); // NOI18N
        Usuario_2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        add(Usuario_2, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 25, 160, 45));

        Mensaje.setFont(new java.awt.Font("Roboto Light", 0, 14)); // NOI18N
        Mensaje.setForeground(new java.awt.Color(255, 0, 0));
        Mensaje.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        add(Mensaje, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 330, 160, 20));

        Matriz2_2.setBorder(null);
        Matriz2_2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        Matriz2_2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        Matriz2_2.setFocusable(false);
        Matriz2_2.setFont(new java.awt.Font("Roboto Light", 1, 12)); // NOI18N
        Matriz2_2.setVerifyInputWhenFocusTarget(false);
        Matriz2_2.setWheelScrollingEnabled(false);

        MATRIZ2.setBorder(null);
        MATRIZ2.setFont(new java.awt.Font("Monospaced", 1, 9)); // NOI18N
        MATRIZ2.setAutoscrolls(false);
        MATRIZ2.setFocusable(false);
        MATRIZ2.setRequestFocusEnabled(false);
        Matriz2_2.setViewportView(MATRIZ2);

        add(Matriz2_2, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 350, 120, 120));
    }// </editor-fold>//GEN-END:initComponents

    private void Coordenadas_P2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Coordenadas_P2MouseClicked
        if (Coordenadas_P2.getText().equals("A,1")) {
            Coordenadas_P2.setFocusable(true);
            Coordenadas_P2.requestFocusInWindow();
            Coordenadas_P2.setText("");
            Coordenadas_P2.setForeground(Color.black);
        }
    }//GEN-LAST:event_Coordenadas_P2MouseClicked

    int saltar_turno = 0;
    private void Confirmar_TxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Confirmar_TxtMouseClicked
        Rectangulos_Confirmados.add(new ArrayList<>(Rectangulo_Actual));
        for (Point p : Rectangulo_Actual) {
            clearLabels(Cuadros, p.x, p.y);
        }

        Rectangulo_Actual.clear();
        for (List<Point> rectangle : Rectangulos_Confirmados) {
            for (Point p : rectangle) {
                if (Cuadros[p.x][p.y] != null) {
                    Cuadros[p.x][p.y].setOpaque(true);
                    Cuadros[p.x][p.y].setBackground(Color.RED);
                }
            }
        }

        Confirmar_Btn.setVisible(false);
        Confirmar_Txt.setVisible(false);

        for (int i = 0; i < Cuadros.length; i++) {
            for (int j = 0; j < Cuadros[i].length; j++) {
                if (Cuadros[i][j] != null && Cuadros[i][j].getBackground() == Color.red) {
                    // El botón Confirmar debería reaparecer si hay un espacio vacío en la matriz
                    Confirmar_Btn.setVisible(true);
                    Confirmar_Txt.setVisible(true);
                    break;
                }
            }
        }

        saltar_turno++;
        Rectangulos_Dibujados++;

        if (saltar_turno == 4) {
            Coordenadas_P2.setVisible(true);
            Txt_Coord.setVisible(true);
            Confirmar_Btn.setVisible(false);
            Confirmar_Txt.setVisible(false);
            Panel_Principal.ShowPanel(Cambio_Turno2);
        }
    }//GEN-LAST:event_Confirmar_TxtMouseClicked

    public void actualizarNombre2() {
        String nombre2 = Almacen_Nombres.getNombreJugador2();
        Usuario_2.setText(nombre2);
    }

    int Rectangulos_Dibujados = 0;
    int[] Dimension_Rectangulo = {2, 2, 3, 4};
    int CurrentX = -1;
    int CurrentY = -1;
    JLabel[][] Cuadros = new JLabel[10][10];
    List<List<Point>> Rectangulos_Confirmados = new ArrayList<>();
    List<Point> Rectangulo_Actual = new ArrayList<>();

    public void Posicionamiento(JPanel Panel) {
        Panel.setLayout(new GridLayout(9, 9));
        JLabel[][] Cuadros = new JLabel[10][10];
        for (int i = 1; i <= 9; i++) {
            for (int j = 1; j <= 9; j++) {
                final int x = j;
                final int y = i;
                Cuadros[j][i] = new JLabel();
                Cuadros[j][i].setPreferredSize(new Dimension(45, 45));
                Cuadros[j][i].setBorder(BorderFactory.createLineBorder(Color.WHITE));
                Cuadros[j][i].addMouseListener(new MouseAdapter() {
                    int direccion = 0; // Agregamos una variable para rastrear la dirección del rectángulo

                    @Override
                    public void mouseClicked(MouseEvent e) {
                        if (Rectangulos_Dibujados >= Dimension_Rectangulo.length) {
                            return;
                        }

                        int size = Dimension_Rectangulo[Rectangulos_Dibujados];

                        for (Point p : Rectangulo_Actual) {
                            clearLabels(Cuadros, p.x, p.y);
                        }

                        Rectangulo_Actual.clear();

                        Confirmar_Btn.setVisible(true);
                        Confirmar_Txt.setVisible(true);
                        boolean canDraw = false;
                        for (int d = 0; d < 4; d++) { // Verificamos si el rectángulo se puede dibujar en cada una de las cuatro direcciones
                            direccion = (direccion + 1) % 4; // Cambiamos la dirección cada vez que se verifica una nueva dirección
                            canDraw = true;
                            if (direccion == 0 || direccion == 2) { // Verificamos si la dirección es hacia la derecha o hacia la izquierda
                                for (int i = 0; i < size; i++) {
                                    int newX = x + i;
                                    if (direccion == 2) {
                                        newX = x - i; // Si la dirección es hacia la izquierda, restamos en lugar de sumar
                                    }
                                    if (newX > 9 || newX < 1) { // Si el nuevo valor de X está fuera de los límites, no dibujamos el rectángulo
                                        canDraw = false;
                                        break;
                                    }
                                    for (List<Point> confirmedRectangle : Rectangulos_Confirmados) {
                                        for (Point p : confirmedRectangle) {
                                            if (p.x == newX && p.y == y) {
                                                canDraw = false;
                                                break;
                                            }
                                        }
                                        if (!canDraw) {
                                            break;
                                        }
                                    }
                                }
                            } else { // La dirección es hacia arriba o hacia abajo
                                for (int i = 0; i < size; i++) {
                                    int newY = y + i;
                                    if (direccion == 3) {
                                        newY = y - i; // Si la dirección es hacia arriba, restamos en lugar de sumar
                                    }
                                    if (newY > 9 || newY < 1) { // Si el nuevo valor de Y está fuera de los límites, no dibujamos el rectángulo
                                        canDraw = false;
                                        break;
                                    }
                                    for (List<Point> confirmedRectangle : Rectangulos_Confirmados) {
                                        for (Point p : confirmedRectangle) {
                                            if (p.x == x && p.y == newY) {
                                                canDraw = false;
                                                break;
                                            }
                                        }
                                        if (!canDraw) {
                                            break;
                                        }
                                    }
                                }
                            }
                            if (canDraw) {
                                break; // Si encontramos una dirección en la que el rectángulo se puede dibujar, salimos del bucle
                            }
                        }
                        if (canDraw) {
                            if (direccion == 0 || direccion == 2) { // Dibujamos el rectángulo hacia la derecha o hacia la izquierda
                                for (int i = 0; i < size; i++) {
                                    int newX = x + i;
                                    if (direccion == 2) {
                                        newX = x - i; // Si la dirección es hacia la izquierda, restamos en lugar de sumar
                                    }
                                    if (newX > 9 || newX < 1) {
                                        continue; // Si el nuevo valor de X está fuera de los límites, no dibujamos esa celda
                                    }
                                    if (Cuadros[newX][y] != null) {
                                        Cuadros[newX][y].setOpaque(true);
                                        Cuadros[newX][y].setBackground(Color.RED);
                                        Barcos_EnTablero2[newX][y] = true;
                                        Rectangulo_Actual.add(new Point(newX, y));
                                    }
                                }
                            } else { // Dibujamos el rectángulo hacia arriba o hacia abajo
                                for (int i = 0; i < size; i++) {
                                    int newY = y + i;
                                    if (direccion == 3) {
                                        newY = y - i; // Si la dirección es hacia arriba, restamos en lugar de sumar
                                    }
                                    if (newY > 9 || newY < 1) {
                                        continue; // Si el nuevo valor de Y está fuera de los límites, no dibujamos esa celda
                                    }
                                    if (Cuadros[x][newY] != null) {
                                        Cuadros[x][newY].setOpaque(true);
                                        Cuadros[x][newY].setBackground(Color.RED);
                                        Barcos_EnTablero2[x][newY] = true;
                                        Rectangulo_Actual.add(new Point(x, newY));
                                    }
                                }
                            }
                        }
                        CurrentX = x;
                        CurrentY = y;
                    }
                });
                Panel.add(Cuadros[j][i]);
            }
        }
    }

    public static boolean[][] Barcos_EnTablero2 = new boolean[10][10];

    public void clearLabels(JLabel[][] labels, int x, int y) {
        if (x >= 1 && x <= 9 && y >= 1 && y <= 9 && labels[x][y] != null) {
            labels[x][y].setOpaque(false);
            labels[x][y].setBackground(null);
            Barcos_EnTablero2[x][y] = false;
        }
    }

    private Timer timer;

    public void Ataque_Vida(JPanel Panel, JTextField Coordenadas_P1) {
        Panel.setLayout(new GridLayout(9, 9));
        JLabel[][] Coordenadas = new JLabel[10][10];
        for (int i = 1; i <= 9; i++) {
            for (int j = 1; j <= 9; j++) {
                final int x = j;
                final int y = i;
                Coordenadas[j][i] = new JLabel();
                Coordenadas[j][i].setPreferredSize(new Dimension(45, 45));
                Coordenadas[j][i].setBorder(BorderFactory.createLineBorder(Color.WHITE));
                Coordenadas[j][i].setHorizontalAlignment(SwingConstants.CENTER);
                Coordenadas[j][i].setVerticalAlignment(SwingConstants.CENTER);
                Coordenadas[j][i].setFont(new Font("Roboto Black", Font.BOLD, 36));
                Panel.add(Coordenadas[j][i]);
            }
        }

        for (int i = 1; i <= 9; i++) {
            for (int j = 1; j <= 9; j++) {
                if (Estado_Juego[j][i] != null) {
                    if (Estado_Juego[j][i]) {
                        Coordenadas[j][i].setText("O");
                        Coordenadas[j][i].setForeground(Color.RED);
                    } else {
                        Coordenadas[j][i].setText("X");
                        Coordenadas[j][i].setForeground(Color.WHITE);
                    }
                }
            }
        }
        Coordenadas_P1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String text = Coordenadas_P1.getText();
                if (text.charAt(1) == ',') {
                    int y = text.toUpperCase().charAt(0) - 'A' + 1;
                    String numberPart = text.substring(2);
                    int x = Integer.parseInt(numberPart);
                    String error = Validar_Coordenadas(x, y, Coordenadas, text);
                    if (x >= 1 && x <= 9 && y >= 1 && y <= 9 && Coordenadas[x][y].getText().isEmpty()) {
                        System.out.println("Label presionado en la posición: (" + x + ", " + y + ")");
                        if (Jugador_1.Barcos_EnTablero1[x][y]) {
                            Coordenadas[x][y].setText("O");
                            Coordenadas[x][y].setForeground(Color.RED);
                            Estado_Juego[x][y] = true;
                        } else {
                            Coordenadas[x][y].setText("X");
                            Coordenadas[x][y].setForeground(Color.WHITE);
                            Estado_Juego[x][y] = false;
                        }

                        boolean allRevealed = true;
                        for (int i = 1; i <= 9; i++) {
                            for (int j = 1; j <= 9; j++) {
                                if (Jugador_1.Barcos_EnTablero1[i][j] && (Estado_Juego[i][j] == null || !Estado_Juego[i][j])) {
                                    allRevealed = false;
                                    break;
                                }
                            }
                            if (!allRevealed) {
                                break;
                            }
                        }
                        if (allRevealed) {
                            Timer timer = new Timer(1000, new ActionListener() {
                                @Override
                                public void actionPerformed(ActionEvent e) {
                                    Mostrar_Ganador.instancia.setJugador2Gana(true);
                                    Panel_Principal.ShowPanel(Mostrar_Ganador);
                                }
                            });
                            timer.setRepeats(false);
                            timer.start();
                        } else {
                            Timer timer = new Timer(1000, new ActionListener() {
                                @Override
                                public void actionPerformed(ActionEvent e) {
                                    Panel_Principal.ShowPanel(Cambio_Turno2);
                                }
                            });
                            timer.setRepeats(false);
                            timer.start();
                        }
                    } else {
                        Mensaje.setText(error);
                        Mensaje.setVisible(true);
                        Timer timer = new Timer(1000, new ActionListener() {
                            @Override
                            public void actionPerformed(ActionEvent e) {
                                Mensaje.setVisible(false);
                            }
                        });
                        timer.setRepeats(false);
                        timer.start();
                    }
                }
            }
        });
    }

    private String Validar_Coordenadas(int x, int y, JLabel Coordenadas[][], String text) {
        if ((x < 1 || x > 9) || (y < 1 || y > 9)) {
            return "Fuera de rango.";
        }

        if (!Coordenadas[x][y].getText().isEmpty()) {
            return "Posición ocupada.";
        }

        if (text.isEmpty()) {
            return "Coord vacia";
        }
        return null;
    }

    public String imprimir2() {
        StringBuilder sb = new StringBuilder();
        sb.append("  ");
        for (int i = 1; i <= 9; i++) {
            sb.append(i + " ");
        }
        sb.append("\n");
        for (int i = 1; i <= 9; i++) {
            sb.append((char) ('A' + i - 1) + " ");
            for (int j = 1; j <= 9; j++) {
                if (Jugador_2.Barcos_EnTablero2[j][i]) {
                    sb.append("X ");
                } else {
                    sb.append("- ");
                }
            }
            if (i < 9) {
                sb.append("\n");
            }
        }
        return sb.toString();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Confirmar_Btn;
    private javax.swing.JLabel Confirmar_Txt;
    private javax.swing.JTextField Coordenadas_P2;
    private javax.swing.JLabel Img_Capitan;
    private javax.swing.JLabel Letr_A;
    private javax.swing.JLabel Letr_B;
    private javax.swing.JLabel Letr_C;
    private javax.swing.JLabel Letr_D;
    private javax.swing.JLabel Letr_E;
    private javax.swing.JLabel Letr_F;
    private javax.swing.JLabel Letr_G;
    private javax.swing.JLabel Letr_H;
    private javax.swing.JLabel Letr_I;
    private javax.swing.JTextPane MATRIZ2;
    private javax.swing.JPanel Mapa;
    private javax.swing.JScrollPane Matriz2_2;
    private javax.swing.JLabel Mensaje;
    private javax.swing.JLabel Num_1;
    private javax.swing.JLabel Num_2;
    private javax.swing.JLabel Num_3;
    private javax.swing.JLabel Num_4;
    private javax.swing.JLabel Num_5;
    private javax.swing.JLabel Num_6;
    private javax.swing.JLabel Num_7;
    private javax.swing.JLabel Num_8;
    private javax.swing.JLabel Num_9;
    private javax.swing.JLabel Txt_Coord;
    private javax.swing.JLabel Usuario_2;
    // End of variables declaration//GEN-END:variables
}
